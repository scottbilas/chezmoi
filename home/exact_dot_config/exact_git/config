# SETUP
#

# until i get a reliable setup for ssh git on windows without wsl, here is how
# i do it now.
#
# 1. ensure can ssh into machine
# 2. ensure posh set as system shell, or the quoting that git does will get screwed up in arg processing. pssetup script has a check for this.
# 3. per repo...
#    a. `g remote add mymachine machine:C:/path/to/repo
#    b. `g config remote.mymachine.uploadpack (resolve-path ~/scoop/apps/git/current/mingw64/bin/git-upload-pack.exe)

;        _ _
;   __ _| (_) __ _ ___  ___  ___
;  / _` | | |/ _` / __|/ _ \/ __|
; | (_| | | | (_| \__ \  __/\__ \
;  \__,_|_|_|\__,_|___/\___||___/

[alias]
    unstage = reset HEAD --
    last = log -1 HEAD

    wt = worktree
    wtl = worktree list
    wts = "!f() { echo ""; git worktree list | while read -r line; do dir=${line%*  *}; echo "$(tput setaf 4)${line%* [*}$(tput sgr 0)"; unset GIT_DIR; git -C $dir status -sb; echo ""; done; }; f"
    # TODO: make this also go and do a `submodule update` on the new worktree
    wta = -c "submodule.recurse=" worktree add
    wtz = !dir=$(git root) && git co origin/master -B "z/$(basename "$dir")" --no-track
    dad = !curl https://icanhazdadjoke.com/ && echo "" && git add

    co = checkout
    fc = clone --recurse --jobs 7
    fcz = fc --filter=blob:none
    ss = stash show -p

    b  = branch -vv
    c  = commit
    d  = diff
    h  = help
    # TODO: gitree way too slow. use a wrapper for `git status --porcelain` that adds color and garphics
    # `npm i -g https://github.com/scottbilas/gitree`
    #s  = !gitree -mcdn
    s  = status

    scobi-xfer = !sh ~/.config/git/git-scobi-xfer

    f  = scobi-xfer
    p  = scobi-xfer --pull
    pr = scobi-xfer --pull --rebase

    sync = scobi-xfer --pull --rebase --push

    # TODO: show state of incoming and outgoing including divergence..
#    io = <make this a script>
#    outgoing = !git scobi-xfer && git l FETCH_HEAD..
#    incoming = !git scobi-xfer && git l ..FETCH_HEAD

    dd = difftool --dir-diff
    sui = submodule update --init

    # this does a couple things:
    # - detect terminal width (`sh` does not do this)
    # - create fixed-width columns except for %s and the last entry %d (refs like branch name)
    # - make one of the columns (%s, the commit first line) expand so the line up to %d fills the terminal
    # - the terminal will wrap %d to the next line if it exists, otherwise no newline. this puts refs right after the commit they point to.
    # - cap the terminal width to 120 to keep readability manageable, while maintaining the %d wrapping
    lx = "!f() { \
        COLUMNS=$(tput cols); \
        END=$((COLUMNS - 160)); \
        END=$((END < 0 ? 0 : END)); \
        COLUMNS=$((COLUMNS - END)); \
        git log --pretty=tformat:\"%Creset%<|($((COLUMNS-46)),trunc)%s%C(bold cyan)  %<(12,trunc)%al  %Cblue%<(14,trunc)%cr  %C(bold black)%<($((END+12)))%h  %C(auto)%d\" $@; \
    }; f"

    # t = "top"
    t0 = lx --all
    t  = t0 --max-count=15
    t2 = t0 --max-count=30

    l0 = lx --first-parent
    l  = l0 --max-count=15
    l2 = l0 --max-count=30

    lg0 = log --graph --pretty=shortlog-graph
    lg  = lg0 --max-count=15
    lg2 = lg0 --max-count=30

    ll = log --graph --stat='100,0,20' --stat-graph-width=20 --pretty=longlog
    rl = reflog --pretty=reflog
    last = log -1 HEAD

    # https://stackoverflow.com/a/68687780/14582
    tagl = tag --format='%(color:cyan)%(align:25)%(refname:short)%(end) %(if)%(object)%(then)%(object)%(else)%(objectname)%(end) %(color:green)%(align:10)%(taggeremail:localpart)%(end) %(color:white)%(align:40,40)[%(creatordate:relative)] %(contents:lines=1)%(end)' -l
    tagv = tag --format='%(color:bold cyan)== %(refname:short) ==%(if)%(object)%(then)%0aTag Hash: %(objectname)%0aTag Date: %(taggerdate:iso-local)%0a  Commit: %(object) %0a%0a%(contents)%(else)%0a(lightweight tag)%0a  Commit: %(objectname)%(end)%0a' -l

    patch = !git --no-pager diff --no-color
    root = rev-parse --show-toplevel

    trash = !git add -A && git commit -m 'TRASH' && git reset --hard HEAD^

    # https://www.erikschierboom.com/2020/02/17/cleaning-up-local-git-branches-deleted-on-a-remote/
    gone = ! "git fetch -p && git for-each-ref --format '%(refname:short) %(upstream:track)' | awk '$2 == \"[gone]\" {print $1}'"
    rm-gone = ! "git gone | xargs -r git branch -D"

    # make a new commit from root containing the whole tree (https://stackoverflow.com/a/23486788/14582)
    squash-all = ! "git reset $(git commit-tree HEAD^{tree} -m 'Initial commit')"

    # easily get into git environment for testing
    zsh = !zsh
    bash = !bash
    sh = !sh


;   ___ ___  _ __ ___
;  / __/ _ \| '__/ _ \
; | (_| (_) | | |  __/
;  \___\___/|_|  \___|

[core]
    autocrlf = input
    editor = micro
    eol = lf
    excludesfile = ~/.config/git/ignore
    hideDotFiles = false
    # longPaths = true   # not recommended to keep this on in general, only use on demand
    pager = delta
    symlinks = true

[sequence]
    editor = interactive-rebase-tool # scoop install git-interactive-rebase-tool

[credential]
    modalprompt = false

[fetch]
    prune = true

[init]
	defaultBranch = dev

[log]
    follow = true

[pull]
;    rebase = merges  # needs more research on how/if i want to do pulls typically
    rebase = false

[push]
    default = simple

[rebase]
    autosquash = true
    updateRefs = true

[rerere]
    enabled = true
    # TODO: add an alias that does `git -c rerere.enabled=false merge ...` for when rerere is not what i want (rare but still happens)

[submodule]
    fetchJobs = 4
    # this is convenient, but causes way too many problems
    # (like `reset` or `checkout` ruining the .git:gitdir of the submodule when working with worktrees and extensions.worktreeConfig=true)
    #recurse = true


;            _                 _
;   _____  _| |_ ___ _ __  ___(_) ___  _ __  ___
;  / _ \ \/ / __/ _ \ '_ \/ __| |/ _ \| '_ \/ __|
; |  __/>  <| ||  __/ | | \__ \ | (_) | | | \__ \
;  \___/_/\_\\__\___|_| |_|___/_|\___/|_| |_|___/

[filter "lfs"]
    clean = git-lfs clean -- %f
    process = git-lfs filter-process
    smudge = git-lfs smudge -- %f
    required = true

# use diff/merge type lfs-text in .gitattributes to enable text diff/merge of LFS files
[diff "lfs-text"]
    textconv = cat
[merge "lfs-text"]
    driver = git lfs merge-driver --ancestor %O --current %A --other %B --marker-size %L --output %A


;  _   _
; | |_| |__   ___ _ __ ___   ___
; | __| '_ \ / _ \ '_ ` _ \ / _ \
; | |_| | | |  __/ | | | | |  __/
;  \__|_| |_|\___|_| |_| |_|\___|

[advice]
    statusHints = false
    detachedHead = false
    skippedCherryPicks = false

[color]
    ui = true
[color "branch"]
    upstream = cyan
[color "diff"]
    commit = yellow bold
    frag = magenta
    meta = yellow
    new = green bold
    old = red bold
    whitespace = red reverse
[color "diff-highlight"]
    oldHighlight = red bold 52
    oldNormal = red bold
    newHighlight = green bold 22
    newNormal = green bold

[pretty]
    longlog = ___%n   \\%n%C(auto)%d%Creset %s%n%C(bold cyan)% ae %Cblue(%cr) %C(bold black)%h
    reflog = %C(auto)%h %<|(20)%gd %C(blue)%cr%C(reset) %gs (%s)
    # TODO: figure out if it's at all possible to get the graph to not override my formatting (consider updating alias to use `column` to format these..)
    shortlog-graph = %<|(15)%Creset%<|(-36,trunc)%s%C(bold cyan)  %<(10,trunc)%al  %Cblue%<(11,trunc)%cr  %C(bold black)%h  %C(auto)%d

# test if we can enable caching for untracked files
#   git update-index --test-untracked-cache
# then if it's ok..
#   git config core.untrackedCache true
#   git update-index --untracked-cache
[status]
    showUntrackedFiles = all


;      _ _  __  __
;   __| (_)/ _|/ _|  _ __ ___   ___ _ __ __ _  ___
;  / _` | | |_| |_  | '_ ` _ \ / _ \ '__/ _` |/ _ \
; | (_| | |  _|  _| | | | | | |  __/ | | (_| |  __/
;  \__,_|_|_| |_|   |_| |_| |_|\___|_|  \__, |\___|
;                                       |___/

### COMMON ###

[diff]
    algorithm = histogram
    color-moved = default
    mnemonicprefix = true
    renames = copies
    renameLimit = 50000

[interactive]
    diffFilter = delta --color-only --features=interactive

[merge]
    renamelimit = 50000
    stat = true
    conflictStyle = diff3


;            _                        _
;   _____  _| |_ ___ _ __ _ __   __ _| |
;  / _ \ \/ / __/ _ \ '__| '_ \ / _` | |
; |  __/>  <| ||  __/ |  | | | | (_| | |
;  \___/_/\_\\__\___|_|  |_| |_|\__,_|_|

### DELTA ###

[include]
    path = ~/.config/git/delta-themes.gitconfig
[delta]
    features = collared-trogon
    side-by-side = true

### TIG ###

[tig]
#   diff-highlight = true  # not currently avail w termux
    horizontal-scroll = 10
    ignore-case = smart-case
    line-graphics = utf-8
    main-view = id date:relative-compact author:email-user commit-title:graph=v2,refs=yes
    mouse = true
    refresh-mode = auto
    tab-size = 4


;            _
;           | |
;   _____  _| |_ _ __ __ _
;  / _ \ \/ / __| '__/ _` |
; |  __/>  <| |_| | | (_| |
;  \___/_/\_\\__|_|  \__,_|

[include]
    path = ~/.config/git/extra


;             _            _
;  _ __  _ __(_)_   ____ _| |_ ___
; | '_ \| '__| \ \ / / _` | __/ _ \
; | |_) | |  | |\ V / (_| | ||  __/
; | .__/|_|  |_| \_/ \__,_|\__\___|
; |_|

[user]
    # https://orrsella.com/2013/08/10/git-using-different-user-emails-for-different-repositories/
    useConfigOnly = true

[include]
    path = ~/.local/share/private/git/config
